# ######################################################################################
# OPERATION SYSTEM
# ######################################################################################
# --------------------------------------------------------------------------------------
# COMMON
# --------------------------------------------------------------------------------------

# The .pid file is a file that typically contains the process ID (PID) of a running program. 
# It is often used to store the PID of a daemon or background process. 
# The primary purpose of a .pid file is to assist in the management of processes, making it easier to identify and control the associated processes.

**/pids

**/*.pid

**/*.pid.lock


# LOG --------

**/log/**

**/*.log


# TEMOPORARY --------

**/tmp/**



# --------------------------------------------------------------------------------------
# OSX
# --------------------------------------------------------------------------------------

# The .DS_Store file is a hidden system file created by the macOS operating system.
# It stores custom attributes of a folder, such as the position of icons, window size, and other view options.
# This file is used by Finder, the default file manager on macOS, to maintain settings specific to individual directories.

**/.DS_store


# The __MACOSX folder is a directory that is automatically created by macOS when you create a zip archive on a Mac using the built-in Archive Utility. 
# This folder is used to store metadata and resource fork information associated with files, which may include custom icons, file permissions, and other macOS-specific attributes.

**/__MACOSX


# ICLOUD --------

**/*.nosync

**/*.com-apple-bird*



# --------------------------------------------------------------------------------------
# WINDOWS
# --------------------------------------------------------------------------------------

# The Thumbs.db file is a system file created by Microsoft Windows operating systems.
# It is used to store thumbnail images of the pictures in a directory, allowing for quicker previewing of image files.
# The file is automatically generated by Windows when you open a folder containing image files.

**/Thumbs.db




# ######################################################################################
# PROGARMING LANGURAGE
# ######################################################################################
# --------------------------------------------------------------------------------------
# C ++
# 
# 🏠
# ├─ 🖿 dist
# │  ├─ 🖺 xxx.app
# │  ├─ 🖺 xxx.exe
# │  ├─ 🖺 xxx.ipa
# │  ├─ 🖺 xxx.out
# │  └─ ...
# ├─ 🖿 src
# │  ├─ 🖺 xxx.cpp
# │  ├─ 🖺 xxx.(lo|o|obj|slo)
# │  ├─ 🖺 xxx.d
# │  ├─ 🖺 xxx.mod
# │  ├─ 🖺 xxx.h
# │  ├─ 🖺 xxx.(gch|pch)
# │  └─ ...
# ├─ 🖿 lib
# │  ├─ 🖺 xxx.(so|dll|dylib)
# │  ├─ 🖺 xxx.(a|lib)
# │  └─ 🖺 xxx.la
# └─ ...
#
# --------------------------------------------------------------------------------------

# The .d file extension is commonly associated with Makefile dependency files.
# These files are automatically generated by build systems, such as Make, to capture dependencies between source files and header files.

**/*.d


# The .lo , .o , .obj and .slo files extension are used for object files. 
# Object files contain compiled machine code generated from the corresponding source code and are created during the compilation phase of a C++ program. 
# They serve as an intermediate step in the compilation process before the creation of the final executable.

# for GNU Compiler Collection (GCC)
**/*.lo

# for Unix
**/*.o

# for Microsoft
**/*.obj

# for Apache Portable Runtime (APR)
**/*.slo


# The .gch and .pch files are a precompiled header file generated by the compiler. 
# Precompiled headers are used to speed up compilation times by allowing certain header files to be compiled once and reused across multiple source files.

# for GNU Compiler Collection (GCC)
**/*.gch

# for Windows
**/*.pch


# The .mod extension is commonly associated with module files. 
# Module files are generated by compilers that support the C++ Modules feature, introduced in C++20.

**/*.mod


# The .so , .dll and .dylib files are a shared library files.
# They contain compiled code and data that multiple programs on run time.

# for Unix
# **/*.so

# for Windows
# **/*.dll

# for macOS
# **/*.dylib


# The .a or .lib file extension are static library files.
# They contain compiled object code that is linked directly into a program at compile time.

# for Unix
# **/*.a

# for Windows
# **/*.lib


# The .la file extension is associated with libtool archive files. 
# Libtool is a generic library support script that hides the complexity of using shared libraries behind a consistent, portable interface. 

# **/*.la



# --------------------------------------------------------------------------------------
# NODE JS
# 
# 🏠
# ├─ 🖿 dist
# │  └─ ...
# ├─ 🖿 src
# │  └─ ...
# ├─ 🖿 jspm_packages
# │  └─ ...
# ├─ 🖿 node_modules
# │  └─ ...
# ├─ 🖺 .eslintcache
# ├─ 🖺 .eslintrc.js
# ├─ 🖺 npm-debug.log
# ├─ 🖺 package.json
# └─ ...
#
# --------------------------------------------------------------------------------------

# The node_modules directory is a common convention in Node.js projects, and it is used to store locally installed Node.js packages and their dependencies.
# This directory is created when you run the npm install command to install dependencies for a Node.js project using the Node Package Manager (npm).

**/node_modules


# The jspm_packages directory is related to the JSPM (JavaScript Package Manager) tool, which is used for package management in JavaScript and Node.js applications.
# JSPM is designed to work with ECMAScript 2015 (ES6) modules and supports the SystemJS module loader.

**/jspm_packages


# The .eslintcache file is used by ESLint, a popular JavaScript and TypeScript linting tool, to cache information about files and their linting results.
# The cache is designed to improve the performance of ESLint by avoiding the need to re-lint unchanged files.

**/.eslintcache


# The npm-debug.log file is a log file created by npm (Node Package Manager) when it encounters errors or issues during the execution of npm commands. 

**/npm-debug.log*



# --------------------------------------------------------------------------------------
# JAVA
# 
# 🏠
# ├─ 🖿 .gradle
# │  └─ ...
# ├─ 🖿 dist
# │  └─ ...
# ├─ 🖿 src
# │  └─ ...
# ├─ 🖺 build.gradle
# ├─ 🖺 settings.gradle
# └─ ...
#
# --------------------------------------------------------------------------------------

# The .gradle directory is associated with Gradle, a build automation tool used primarily for Java projects. 
# It stores various files and directories related to the build process, caching, and other internal configurations.

**/.gradle



# --------------------------------------------------------------------------------------
# PYTHON
# --------------------------------------------------------------------------------------

# The __pycache__ folder is a directory that Python uses to store compiled bytecode files (.pyc) when you import a module.
# Python source code (.py files) is compiled into bytecode before being executed.
# The compiled bytecode is stored in the __pycache__ folder to speed up subsequent imports of the same module.
**/__pycache__

# The .pyc files are compiled Python files that are automatically generated by the Python interpreter.
# When you run a Python script, the interpreter compiles the source code (.py) into bytecode and saves it as a .pyc file to speed up future imports of the same module.
**/*.pyc



# --------------------------------------------------------------------------------------
# SASS
# 
# 🏠
# ├─ 🖿 .sass-cache
# │  └─ ...
# └─ ...
#
# --------------------------------------------------------------------------------------

# The .sass-cache directory is automatically generated by Sass and is used to store cached versions of compiled CSS files.

**/.sass-cache



# --------------------------------------------------------------------------------------
# SWIFT
# 
# 🏠
# ├─ 🖿 .build
# │  └─ ...
# └─ ...
#
# --------------------------------------------------------------------------------------

# The .build directory is often used as the default location for build artifacts, intermediate files, and dependencies generated during the build process by the Swift Package Manager(SPM). 

**/.build



# --------------------------------------------------------------------------------------
# TYPESCRIPT
# 
# 🏠
# ├─ 🖿 dist
# │  └─ ...
# ├─ 🖿 src
# │  └─ ...
# ├─ 🖿 node_modules
# │  ├─ @types
# │  └─ ...
# ├─ 🖿 typings
# │  ├─ xxx.d.ts
# │  └─ ...
# ├─ 🖺 package.json
# ├─ 🖺 tsconfig.json
# ├─ 🖺 tsconfig.tsbuildinfo
# └─ ...
#
# --------------------------------------------------------------------------------------

# The typings folder is a common location where type definition files (.d.ts files) are stored.
# These type definition files provide declarations for external JavaScript libraries or modules that may not include TypeScript type information by default.

# **/typings


# The tsconfig.tsbuildinfo file is a TypeScript build info file that is automatically generated when you compile a TypeScript project using the TypeScript Compiler (TSC). 
# This file is used to store information about the incremental build state of your TypeScript project, allowing the TypeScript compiler to optimize subsequent builds by reusing previously computed information.

**/*.tsbuildinfo




# ######################################################################################
# PROGARMING APPLICATION
# ######################################################################################
# --------------------------------------------------------------------------------------
# CONCURRENT VERSIONS SYSTEM
# 
# 🏠
# ├─ 🖿 CVS
# │  └─ ...
# └── ...
#
# --------------------------------------------------------------------------------------

# The CVS folder is a directory that is automatically created by CVS in each directory of a working copy. 
# It is used to store administrative files and metadata related to version control. 

**/CVS



# --------------------------------------------------------------------------------------
# GIT - GIT
# 
# 🏠
# ├─ 🖿 .git
# │  └─ ...
# ├─ 🖺 .gitignore
# ├─ 🖺 .gitmodules
# └── ...
#
# --------------------------------------------------------------------------------------

# The .git folder is a hidden directory that is created when you initialize a new Git repository in a directory.
# It serves as the main repository for a Git project, storing all the necessary information about the version control history, branches, configuration settings, and more.

**/.git



# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# APACHE
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# --------------------------------------------------------------------------------------
# SUBVERSION
# 
# 🏠
# ├─ 🖿 .svn
# │  └─ ...
# └── ...
#
# --------------------------------------------------------------------------------------

# The .svn folder is a directory that is automatically created by SVN in each directory of a working copy.
# It contains metadata and administrative files that SVN uses to keep track of the state of the files and directories in the working copy.

**/.svn



# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MICROSOFT
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# --------------------------------------------------------------------------------------
# SQL COMPACT
# --------------------------------------------------------------------------------------

# The .sdf file extension is commonly associated with Microsoft SQL Server Compact Edition (SQL Server CE). It contains the data and schema for the local database and are typically created and used by applications to store and retrieve data locally.

**/*.opensdf

**/*.sdf



# --------------------------------------------------------------------------------------
# SQL LITE
# --------------------------------------------------------------------------------------

**/*.VC.VC.opendb

**/*.VC.db



# --------------------------------------------------------------------------------------
# VSCODE
# 
# 🏠
# ├─ 🖿 .vscode
# │  └─ ...
# ├─ ...
# ?
# └─ xxx.code-workspace
#
# --------------------------------------------------------------------------------------

# The .vscode folder is a directory that is commonly used to store configuration settings for the Visual Studio Code (VSCode) editor. 
# It allows developers to define project-specific settings and preferences that are specific to the VSCode environment.

**/.vscode


# The .code-workspace file is a configuration file used by Visual Studio Code (VSCode) to define settings and preferences specific to a workspace. 
# A workspace in VSCode is a collection of one or more folders opened in a single window. 
# The .code-workspace file allows you to save and share the configuration of your workspace, including settings, extensions, and more.

**/*.code-workspace



# --------------------------------------------------------------------------------------
# VISUAL STUDIO
# 
# 🏠
# ├─ 🖿 Project
# │  ├─ 🖺 xxx.csproj
# │  └─ ...
# ├─ 🖺 xxx.sln
# ├─ 🖺 xxx.suo
# └─ ...
#
# --------------------------------------------------------------------------------------

# The .sln file is a solution file used by Microsoft Visual Studio, an integrated development environment (IDE) for Windows.
# The .sln file contains information about the projects that are part of a solution, their dependencies, build configurations, and other settings.
# When you open a solution in Visual Studio, it reads the information from the .sln file to organize and manage the projects within the solution.

**/*.sln

# The .suo file is a solution user options file associated with Microsoft Visual Studio. 
# It is specific to a particular user and contains user-specific settings and preferences for a Visual Studio solution. 
# The .suo file is not intended to be shared among team members, as it stores settings that are personal to an individual user's experience with Visual Studio.

**/*.suo

# The .csproj file is a project file used in Microsoft Visual Studio for C# projects. 
# It is an XML-based file that defines the structure and build configuration of a C# project. 
# The .csproj file includes information about source files, references, build settings, and other project-specific details.

.csproj



# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# APPLE
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# --------------------------------------------------------------------------------------
# X CODE
# 
# 🏠
# ├─ 🖿 xxx.xcworkspace
# │  ├─ 🖺 xxx.xcworkspacedata
# │  └─ ...
# ├─ 🖿 xxx
# │  ├─ 🖿 xxx.xcodeproj
# │  │  ├─ 🖺 xxx.pbxproj
# │  │  └─ ...
# │  ├─ 🖿 xcuserdata
# │  │  ├─ 🖿 xxx.xcuserdatad
# │  │  │  ├─ 🖺 xxx.xccheckout
# │  │  │  ├─ 🖺 xxx.xcscmblueprint
# │  │  │  ├─ 🖺 xxx.xcuserstate
# │  │  │  └─ ...
# │  │  └─ ...
# │  └─ ...
# └─ ...
#
# --------------------------------------------------------------------------------------

# The .xcworkspace file is associated with Apple's Xcode development environment. 
# It represents an Xcode workspace, which is a container that can hold multiple Xcode projects and additional related files. 
# Workspaces are useful for organizing and managing the development of larger software projects that consist of multiple projects or components.

**/*.xcworkspace


# The .xcodeproj file is associated with Apple's Xcode development environment.
# It is a file that represents an Xcode project, which is a container for organizing and managing source code, assets, and configuration settings for building software applications on Apple platforms, such as iOS, macOS, watchOS, and tvOS.

**/*.xcodeproj


# The xcuserdata directory is part of an Xcode project's internal structure, and it contains user-specific data and settings for the Xcode project. 
# Each user working on an Xcode project may have their own xcuserdata directory within the project directory, and these directories store user-specific information, such as personal settings, breakpoints, and other Xcode-related preferences.

**/xcuserdata


# The .dSYM file is associated with the debugging information generated by the Apple LLVM compiler for macOS and iOS applications. 
# The file contains debugging symbols and information that is used by debugging tools to map machine code back to the original source code, making it easier to debug and analyze issues in a program.

**/*.dSYM.zip

**/*.dSYM


# --------

**/*.hmap
